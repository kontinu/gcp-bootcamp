{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to our Bootcamp Hands On \ud83d\udc68\u200d\ud83d\udcbb \u00b6 We prepared these couple guided laboratories as a complement to our Remote Bootcamp, to help you understand some of the services that GCP has to offer. The laboratories are meant to adopt 5 services in order to deploy a simple \"hello-world\" web application GCS cloud storage buckets for storing files and to serve static content. (most easy) GCE VM install everything from scratch and deploy the webapp. (medium) GKE Kubernetes cluster for running the webapp. (hard) App Engine for running the webapp. (easy) Cloud Functions for running the webapp. (easy) Note You will have the option to choose from a Python app or a NodeJS app, the services covered in the labo","title":"Home \ud83c\udfe0"},{"location":"#welcome-to-our-bootcamp-hands-on","text":"We prepared these couple guided laboratories as a complement to our Remote Bootcamp, to help you understand some of the services that GCP has to offer. The laboratories are meant to adopt 5 services in order to deploy a simple \"hello-world\" web application GCS cloud storage buckets for storing files and to serve static content. (most easy) GCE VM install everything from scratch and deploy the webapp. (medium) GKE Kubernetes cluster for running the webapp. (hard) App Engine for running the webapp. (easy) Cloud Functions for running the webapp. (easy) Note You will have the option to choose from a Python app or a NodeJS app, the services covered in the labo","title":"Welcome to our Bootcamp Hands On \ud83d\udc68\u200d\ud83d\udcbb"},{"location":"1.gcs-www/","text":"Lab 1 \u00b6 In this tutorial you will: Point your domain to Cloud Storage by using a CNAME record. Create a bucket that is linked to your domain. Upload and share your site's files. Test the website. Before \u00b6 In the Google Cloud Console, on the project selector page, select or create a Google Cloud project. Note: If you don't plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project. Make sure that billing is enabled for your Cloud project. Learn how to confirm that billing is enabled for your project. (Optional) Have a domain that you own or manage. If you don't have an existing domain, there are many services through which you can register a new domain, such as Google Domains. This tutorial uses the domain example.com. Warning You can either use gsutil (cli) or follow example during the session. 1. Creating a bucket \u00b6 Use the gsutil mb command: 1 gsutil mb gs://www.example.com If successful, the command returns: 1 Creating gs://www.example.com/... Go back \ud83c\udfe1 1 teachme tutorial.md","title":"Lab 1\ufe0f\u20e3 (gcs bucket)"},{"location":"1.gcs-www/#lab-1","text":"In this tutorial you will: Point your domain to Cloud Storage by using a CNAME record. Create a bucket that is linked to your domain. Upload and share your site's files. Test the website.","title":"Lab 1"},{"location":"1.gcs-www/#before","text":"In the Google Cloud Console, on the project selector page, select or create a Google Cloud project. Note: If you don't plan to keep the resources that you create in this procedure, create a project instead of selecting an existing project. After you finish these steps, you can delete the project, removing all resources associated with the project. Make sure that billing is enabled for your Cloud project. Learn how to confirm that billing is enabled for your project. (Optional) Have a domain that you own or manage. If you don't have an existing domain, there are many services through which you can register a new domain, such as Google Domains. This tutorial uses the domain example.com. Warning You can either use gsutil (cli) or follow example during the session.","title":"Before"},{"location":"1.gcs-www/#1-creating-a-bucket","text":"Use the gsutil mb command: 1 gsutil mb gs://www.example.com If successful, the command returns: 1 Creating gs://www.example.com/... Go back \ud83c\udfe1 1 teachme tutorial.md","title":"1. Creating a bucket"},{"location":"2.gce/","text":"2. GCE \u00b6 Pre requisites \u00b6 have a basic understanding of linux OS. have a basic understanding of bash scripting. use package managers or have a basic understanding of how to install packages. Hello World on Compute Engine. \u00b6 Compute Engine lets you create and run virtual machines on Google infrastructure. Compute Engine provides control of every component but also assumes it\u2019s your responsibility to keep things running. With VMs, you obviously need to go ahead and install/configure your own web hosting stack from scratch (and also decide how to provide for load balancing and scalability, from a variety of options.) The GCP documentation looks extremely useful, but who starts by reading the manual? Google Search to the rescue: \u201cgoogle compute engine create a vm\u201d \u201cgoogle compute engine ssh into vm\u201d \u201cinstall python linux\u201d \u201chello world python\u201d \u201chello world python google compute engine\u201d\u2026 Plan \u00b6 Create a VM on GCE (Linux obviously) Install python3 and/or node.js on the VM. Setup hello-world app provided in the repo. Run the app and expose it on a public IP address. Can we scale? 1. Create a VM on GCE \u00b6 Navigate to VM Instances page in Google Cloud Console and go through the setup process. Instance name: changed to helloworld-vm Machine type: changed to small (1 shared vCPU, 1.7 GB memory) Zone: changed to us-west-a (I am based in Seattle, so selected one of the \u2018west\u2019 options available) Boot disk: Google Debian GNU/Linux 9 (default) Firewall: checked to allow both HTTP and HTTPS traffic Pricing $14.20 per month estimated. Hit the Create button. The VM instance is up and running in literally a few seconds. Connect via SSH. if you prefer to use gcloud, you can use: SSH \ud83d\udd3d: View gcloud command 1 gcloud compute --project \"kontinu\" ssh --zone \"us-west1-a\" \"helloworld-vm\" 2. Install python3 and/or node.js on the VM \u00b6 Common packages \u00b6 1 2 sudo apt-get update sudo apt-get install -y curl git Python3 \u00b6 1 2 3 4 sudo apt-get update sudo apt-get install -y python3 python3-pip python --version pip --version Node.js \u00b6 Google Search: \"Installing Node.js Tutorial: Debian Linux\" 1 2 3 4 5 6 sudo apt-get update sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs node --version npm --version 3. Setup hello-world app provided in the repo. \u00b6 1 2 git clone https://github.com/kontinu/gcp-bootcamp.git cd gcp-bootcamp/src python \u00b6 1 2 3 cd python/ pip3 install -r requirements.txt python3 app.py node.js \u00b6 1 2 3 4 cd nodejs/ npm install node app.js 4. Run the app and expose it on a public IP address. \u00b6 I search on \u201cgoogle compute engine open firewall ports\u201d , which brings me to StackOverflow . Then I open port 8080 for both http and https using Cloud Console (Networking > VPC Network): ??? note: change https:// to http:// 5. Can we scale? \u00b6 Compute Engine does offer load balancing and autoscaling for groups of instances but it requires additional setup, maintenance, as well as general understanding of scalable web architectures and distributed systems design Things to consider: - instance templates - Startup-scripts - MIG - Tutorial 6. Containers on GCE \u00b6 Install Docker \ud83d\udc33 1 2 3 4 5 6 7 curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose Startup the application Using docker: 1 2 docker build -f src/python/Dockerfile -t helloworld-python:latest src/python docker run -it -p 8080:8080 helloworld-python:latest Using docker-compose 1 docker-compose up --build Further Reading \u00b6 https://cloud.google.com/compute/docs/tutorials/basic-webserver-apache \u2192 Note credits to Dmytro Meinyk","title":"Lab 2\ufe0f\u20e3 (GCE)"},{"location":"2.gce/#2-gce","text":"","title":"2. GCE"},{"location":"2.gce/#pre-requisites","text":"have a basic understanding of linux OS. have a basic understanding of bash scripting. use package managers or have a basic understanding of how to install packages.","title":"Pre requisites"},{"location":"2.gce/#hello-world-on-compute-engine","text":"Compute Engine lets you create and run virtual machines on Google infrastructure. Compute Engine provides control of every component but also assumes it\u2019s your responsibility to keep things running. With VMs, you obviously need to go ahead and install/configure your own web hosting stack from scratch (and also decide how to provide for load balancing and scalability, from a variety of options.) The GCP documentation looks extremely useful, but who starts by reading the manual? Google Search to the rescue: \u201cgoogle compute engine create a vm\u201d \u201cgoogle compute engine ssh into vm\u201d \u201cinstall python linux\u201d \u201chello world python\u201d \u201chello world python google compute engine\u201d\u2026","title":"Hello World on Compute Engine."},{"location":"2.gce/#plan","text":"Create a VM on GCE (Linux obviously) Install python3 and/or node.js on the VM. Setup hello-world app provided in the repo. Run the app and expose it on a public IP address. Can we scale?","title":"Plan"},{"location":"2.gce/#1-create-a-vm-on-gce","text":"Navigate to VM Instances page in Google Cloud Console and go through the setup process. Instance name: changed to helloworld-vm Machine type: changed to small (1 shared vCPU, 1.7 GB memory) Zone: changed to us-west-a (I am based in Seattle, so selected one of the \u2018west\u2019 options available) Boot disk: Google Debian GNU/Linux 9 (default) Firewall: checked to allow both HTTP and HTTPS traffic Pricing $14.20 per month estimated. Hit the Create button. The VM instance is up and running in literally a few seconds. Connect via SSH. if you prefer to use gcloud, you can use: SSH \ud83d\udd3d: View gcloud command 1 gcloud compute --project \"kontinu\" ssh --zone \"us-west1-a\" \"helloworld-vm\"","title":"1. Create a VM on GCE"},{"location":"2.gce/#2-install-python3-andor-nodejs-on-the-vm","text":"","title":"2. Install python3 and/or node.js on the VM"},{"location":"2.gce/#common-packages","text":"1 2 sudo apt-get update sudo apt-get install -y curl git","title":"Common packages"},{"location":"2.gce/#python3","text":"1 2 3 4 sudo apt-get update sudo apt-get install -y python3 python3-pip python --version pip --version","title":"Python3"},{"location":"2.gce/#nodejs","text":"Google Search: \"Installing Node.js Tutorial: Debian Linux\" 1 2 3 4 5 6 sudo apt-get update sudo curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - sudo apt-get install -y nodejs node --version npm --version","title":"Node.js"},{"location":"2.gce/#3-setup-hello-world-app-provided-in-the-repo","text":"1 2 git clone https://github.com/kontinu/gcp-bootcamp.git cd gcp-bootcamp/src","title":"3. Setup hello-world app provided in the repo."},{"location":"2.gce/#python","text":"1 2 3 cd python/ pip3 install -r requirements.txt python3 app.py","title":"python"},{"location":"2.gce/#nodejs_1","text":"1 2 3 4 cd nodejs/ npm install node app.js","title":"node.js"},{"location":"2.gce/#4-run-the-app-and-expose-it-on-a-public-ip-address","text":"I search on \u201cgoogle compute engine open firewall ports\u201d , which brings me to StackOverflow . Then I open port 8080 for both http and https using Cloud Console (Networking > VPC Network): ??? note: change https:// to http://","title":"4. Run the app and expose it on a public IP address."},{"location":"2.gce/#5-can-we-scale","text":"Compute Engine does offer load balancing and autoscaling for groups of instances but it requires additional setup, maintenance, as well as general understanding of scalable web architectures and distributed systems design Things to consider: - instance templates - Startup-scripts - MIG - Tutorial","title":"5. Can we scale?"},{"location":"2.gce/#6-containers-on-gce","text":"Install Docker \ud83d\udc33 1 2 3 4 5 6 7 curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose Startup the application Using docker: 1 2 docker build -f src/python/Dockerfile -t helloworld-python:latest src/python docker run -it -p 8080:8080 helloworld-python:latest Using docker-compose 1 docker-compose up --build","title":"6. Containers on GCE"},{"location":"2.gce/#further-reading","text":"https://cloud.google.com/compute/docs/tutorials/basic-webserver-apache \u2192 Note credits to Dmytro Meinyk","title":"Further Reading"},{"location":"3.gke/","text":"3. Containers in GKE \u00b6 requirements \u00b6 GKE Containers The Childrens Illustrated guide to Kubernetes \u201cHello, World\u201d on Kubernetes Engine \u00b6 Alright, containers\u2026 Bring \u2019em on! Kubernetes Engine provides a managed environment for deploying, managing, and scaling your containerized applications using Google infrastructure. So let\u2019s turn our simple \u201cHello World\u201d into a replicated application running on Google\u2019s hosted version of Kubernetes. Plan \u00b6 Create a Docker container image and push it to Google Container Registry Create a GKE cluster Deploy app to GKE cluster. Expose the app to external traffic Assess scaling on GKE Note All in cloud-shell 1. Create a Docker container image \u00b6 I already provide you with a Dockerfile. Open it and check it out. 1 2 3 vim src/python/Dockerfile vim docker-compose.yml We can easily build & push a Docker image from our Dockerfile using docker commands or do a shortcut using docker-compose. 1 2 3 4 5 6 7 docker-compose build docker images docker-compose push #or gcloud docker -- push gcr.io/${GOOGLE_CLOUD_PROJECT}/python-gcp:v1.0 2. Create a GKE cluster \u00b6 Let\u2019s go ahead and create a cluster: Name: hello-world Machine type: small All other settings: default Now I got my own Kubernetes cluster powered by GKE\u2026 Great! 3. Deploy app to GKE cluster \u00b6 1 2 3 4 5 gcloud container clusters get-credentials .... kubectl get nodes kubectl run hello-world --image=gcr.io/${GOOGLE_CLOUD_PROJECT}/python-gcp:v1.0 --port=8080 4. Expose app to external traffic \u00b6 1 2 3 kubectl expose deployment hello-world --type=\"LoadBalancer\" kubectl get services 5. Assess scaling on GKE \u00b6 1 kubectl scale deployment hello-world --replicas=4 Info Kubernetes Engine also comes with the cluster autoscaler feature that automatically resizes clusters based on the demands of the workloads you want to run. (With autoscaling enabled, GKE automatically adds a new node to your cluster if you\u2019ve created new pods that don\u2019t have enough capacity to run; conversely, if a node in your cluster is underutilized and its pods can be run on other nodes, the node gets deleted.)","title":"Lab 3\ufe0f\u20e3 (GKE)"},{"location":"3.gke/#3-containers-in-gke","text":"","title":"3. Containers in GKE"},{"location":"3.gke/#requirements","text":"GKE Containers The Childrens Illustrated guide to Kubernetes","title":"requirements"},{"location":"3.gke/#hello-world-on-kubernetes-engine","text":"Alright, containers\u2026 Bring \u2019em on! Kubernetes Engine provides a managed environment for deploying, managing, and scaling your containerized applications using Google infrastructure. So let\u2019s turn our simple \u201cHello World\u201d into a replicated application running on Google\u2019s hosted version of Kubernetes.","title":"\u201cHello, World\u201d on Kubernetes Engine"},{"location":"3.gke/#plan","text":"Create a Docker container image and push it to Google Container Registry Create a GKE cluster Deploy app to GKE cluster. Expose the app to external traffic Assess scaling on GKE Note All in cloud-shell","title":"Plan"},{"location":"3.gke/#1-create-a-docker-container-image","text":"I already provide you with a Dockerfile. Open it and check it out. 1 2 3 vim src/python/Dockerfile vim docker-compose.yml We can easily build & push a Docker image from our Dockerfile using docker commands or do a shortcut using docker-compose. 1 2 3 4 5 6 7 docker-compose build docker images docker-compose push #or gcloud docker -- push gcr.io/${GOOGLE_CLOUD_PROJECT}/python-gcp:v1.0","title":"1. Create a Docker container image"},{"location":"3.gke/#2-create-a-gke-cluster","text":"Let\u2019s go ahead and create a cluster: Name: hello-world Machine type: small All other settings: default Now I got my own Kubernetes cluster powered by GKE\u2026 Great!","title":"2. Create a GKE cluster"},{"location":"3.gke/#3-deploy-app-to-gke-cluster","text":"1 2 3 4 5 gcloud container clusters get-credentials .... kubectl get nodes kubectl run hello-world --image=gcr.io/${GOOGLE_CLOUD_PROJECT}/python-gcp:v1.0 --port=8080","title":"3. Deploy app to GKE cluster"},{"location":"3.gke/#4-expose-app-to-external-traffic","text":"1 2 3 kubectl expose deployment hello-world --type=\"LoadBalancer\" kubectl get services","title":"4. Expose app to external traffic"},{"location":"3.gke/#5-assess-scaling-on-gke","text":"1 kubectl scale deployment hello-world --replicas=4 Info Kubernetes Engine also comes with the cluster autoscaler feature that automatically resizes clusters based on the demands of the workloads you want to run. (With autoscaling enabled, GKE automatically adds a new node to your cluster if you\u2019ve created new pods that don\u2019t have enough capacity to run; conversely, if a node in your cluster is underutilized and its pods can be run on other nodes, the node gets deleted.)","title":"5. Assess scaling on GKE"},{"location":"4.run/","text":"Under Construction \ud83d\udea7 Cloud Run \u00b6 Info Develop and deploy highly scalable containerized applications on a fully managed serverless platform. - Write code your way using your favorite languages (Go, Python, Java, Ruby, Node.js, and more) - Abstract away all infrastructure management for a simple developer experience - Built upon the container and Knative open standards, enabling portability of your applications Benefits & Features \u00b6 Container to production in seconds \u00b6 Write code your way by deploying any code or container that listens for requests or events. Build applications in your favorite language, with your favorite dependencies and tools, and deploy them in seconds. Fully managed \u00b6 Cloud Run abstracts away all infrastructure management by automatically scaling up and down from zero almost instantaneously\u2014depending on traffic. Cloud Run only charges you for the exact resources you use. Enhanced developer experience \u00b6 Cloud Run makes app development and deployment simpler and faster. And it\u2019s fully integrated with Cloud Code, Cloud Build, Cloud Monitoring, and Cloud Logging for an enhanced end-to-end developer experience. Any language, any library, any binary \u00b6 Use the programming language of your choice, any language or operating system libraries, or even bring your own binaries. Leverage container workflows and standards \u00b6 Containers have become a standard to package and deploy code and its dependencies. Cloud Run pairs great with the container ecosystem: Cloud Build, Cloud Code, Artifact Registry, and Docker. Pay\u2010per\u2010use \u00b6 Only pay when your code is running, billed to the nearest 100 milliseconds. Fast autoscaling \u00b6 Cloud Run automatically scales up or down from zero to N depending on traffic. Redundancy \u00b6 Cloud Run services are regional, automatically replicated across multiple zones. Integrated logging and monitoring \u00b6 Out-of-the-box integration with Cloud Monitoring, Cloud Logging, Cloud Trace, and Error Reporting to ensure the health of an application. some uses cases What you will learn in this lab \u00b6 What is Cloud Run. What you need to deploy and run your workloads to CloudRun. Build and Run on CloudRun Deploying an existing container image to CloudRun Do a Blue/Green deployment Knative == CloudRun? Things you need \u00b6 Dockerfile sample source code. Build and Run on CloudRun \u00b6 In Cloud Shell run the following commands: Clone the repo: 1 2 git clone https://github.com/kontinu/gcp-bootcamp.git cd gcp-bootcamp 1 2 3 4 5 gsutil mb -l us-east1 gs://${GOOGLE_CLOUD_PROJECT}_cloudbuild cd src/python gcloud run deploy --region=us-east1 --tag main <your-name>-app Note fill out the prompted questions accordingly. 1 This command is equivalent to running `gcloud builds submit --tag [IMAGE] /home/cloud_user_p_264ad208/gcp-bootcamp/src/python` and `gcloud run deploy marcos-app --image [IMAGE]` Deploying an existing container image to CloudRun \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cd ~/gcp-bootcamp export LD_LIBRARY_PATH=/usr/local/lib gcloud auth configure-docker us-east1-docker.pkg.dev gcloud artifacts repositories create python-gcp --location=us-east1 --repository-format=docker export version=1.0 export color=blue docker-compose build docker-compose push gcloud run deploy <your-name>-my-app --region=us-east1 --tag $color --image=us-east1-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/python-gcp/app:v${version} Blue Green Deployment \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 cd ~/gcp-bootcamp export LD_LIBRARY_PATH=/usr/local/lib # Deploy BLUE VERSION export color=blue export version=1.0 docker-compose build docker-compose push gcloud run deploy <your-name>-rollout-app --allow-unauthenticated --region=us-east1 --tag $color --image=us-east1-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/python-gcp/app:v${version} # Deploy GREEN VERSION export color=green export version=2.0 docker-compose build docker-compose push gcloud run deploy <your-name>-rollout-app --allow-unauthenticated --region=us-east1 --tag $color --no-traffic --image=us-east1-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/python-gcp/app:v${version} # update traffic gcloud run services update-traffic rollout-app --to-tags green=1 Help 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 gcloud run deploy [[SERVICE] --namespace=NAMESPACE] [--args=[ARG,...]] [--async] [--command=[COMMAND,...]] [--concurrency=CONCURRENCY] [--cpu=CPU] [--ingress=INGRESS; default=\"all\"] [--max-instances=MAX_INSTANCES] [--memory=MEMORY] [--min-instances=MIN_INSTANCES] [--platform=PLATFORM; default=\"managed\"] [--port=PORT] [--service-account=SERVICE_ACCOUNT] [--tag=TAG] [--timeout=TIMEOUT] [--no-traffic] [--[no-]use-http2] [--clear-env-vars | --set-env-vars=[KEY=VALUE,...] | --remove-env-vars=[KEY,...] --update-env-vars=[KEY=VALUE,...]] [--clear-labels | --remove-labels=[KEY,...] --labels=[KEY=VALUE,...] | --update-labels=[KEY=VALUE,...]] [--clear-secrets | --set-secrets=[KEY=VALUE,...] | --remove-secrets=[KEY,...] --update-secrets=[KEY=VALUE,...]] [--connectivity=CONNECTIVITY --clear-config-maps | --set-config-maps=[KEY=VALUE,...] | --remove-config-maps=[KEY,...] --update-config-maps=[KEY=VALUE,...]] [--image=IMAGE | --source=SOURCE] [--[no-]allow-unauthenticated --breakglass=JUSTIFICATION --clear-vpc-connector --revision-suffix=REVISION_SUFFIX --vpc-connector=VPC_CONNECTOR --vpc-egress=VPC_EGRESS --add-cloudsql-instances=[CLOUDSQL-INSTANCES,...] | --clear-cloudsql-instances | --remove-cloudsql-instances=[CLOUDSQL-INSTANCES,...] | --set-cloudsql-instances=[CLOUDSQL-INSTANCES,...] --binary-authorization=POLICY | --clear-binary-authorization --clear-key | --key=KEY --clear-post-key-revocation-action-type | --post-key-revocation-action-type=POST_KEY_REVOCATION_ACTION_TYPE] [--region=REGION | --cluster=CLUSTER --cluster-location=CLUSTER_LOCATION | --context=CONTEXT --kubeconfig=KUBECONFIG] [GCLOUD_WIDE_FLAG ...]","title":"Lab 4\ufe0f\u20e3 (CloudRun \ud83c\udfc3\u200d\u2642\ufe0f)"},{"location":"4.run/#cloud-run","text":"Info Develop and deploy highly scalable containerized applications on a fully managed serverless platform. - Write code your way using your favorite languages (Go, Python, Java, Ruby, Node.js, and more) - Abstract away all infrastructure management for a simple developer experience - Built upon the container and Knative open standards, enabling portability of your applications","title":"Cloud Run"},{"location":"4.run/#benefits-features","text":"","title":"Benefits &amp; Features"},{"location":"4.run/#container-to-production-in-seconds","text":"Write code your way by deploying any code or container that listens for requests or events. Build applications in your favorite language, with your favorite dependencies and tools, and deploy them in seconds.","title":"Container to production in seconds"},{"location":"4.run/#fully-managed","text":"Cloud Run abstracts away all infrastructure management by automatically scaling up and down from zero almost instantaneously\u2014depending on traffic. Cloud Run only charges you for the exact resources you use.","title":"Fully managed"},{"location":"4.run/#enhanced-developer-experience","text":"Cloud Run makes app development and deployment simpler and faster. And it\u2019s fully integrated with Cloud Code, Cloud Build, Cloud Monitoring, and Cloud Logging for an enhanced end-to-end developer experience.","title":"Enhanced developer experience"},{"location":"4.run/#any-language-any-library-any-binary","text":"Use the programming language of your choice, any language or operating system libraries, or even bring your own binaries.","title":"Any language, any library, any binary"},{"location":"4.run/#leverage-container-workflows-and-standards","text":"Containers have become a standard to package and deploy code and its dependencies. Cloud Run pairs great with the container ecosystem: Cloud Build, Cloud Code, Artifact Registry, and Docker.","title":"Leverage container workflows and standards"},{"location":"4.run/#payperuse","text":"Only pay when your code is running, billed to the nearest 100 milliseconds.","title":"Pay\u2010per\u2010use"},{"location":"4.run/#fast-autoscaling","text":"Cloud Run automatically scales up or down from zero to N depending on traffic.","title":"Fast autoscaling"},{"location":"4.run/#redundancy","text":"Cloud Run services are regional, automatically replicated across multiple zones.","title":"Redundancy"},{"location":"4.run/#integrated-logging-and-monitoring","text":"Out-of-the-box integration with Cloud Monitoring, Cloud Logging, Cloud Trace, and Error Reporting to ensure the health of an application. some uses cases","title":"Integrated logging and monitoring"},{"location":"4.run/#what-you-will-learn-in-this-lab","text":"What is Cloud Run. What you need to deploy and run your workloads to CloudRun. Build and Run on CloudRun Deploying an existing container image to CloudRun Do a Blue/Green deployment Knative == CloudRun?","title":"What you will learn in this lab"},{"location":"4.run/#things-you-need","text":"Dockerfile sample source code.","title":"Things you need"},{"location":"4.run/#build-and-run-on-cloudrun","text":"In Cloud Shell run the following commands: Clone the repo: 1 2 git clone https://github.com/kontinu/gcp-bootcamp.git cd gcp-bootcamp 1 2 3 4 5 gsutil mb -l us-east1 gs://${GOOGLE_CLOUD_PROJECT}_cloudbuild cd src/python gcloud run deploy --region=us-east1 --tag main <your-name>-app Note fill out the prompted questions accordingly. 1 This command is equivalent to running `gcloud builds submit --tag [IMAGE] /home/cloud_user_p_264ad208/gcp-bootcamp/src/python` and `gcloud run deploy marcos-app --image [IMAGE]`","title":"Build and Run on CloudRun"},{"location":"4.run/#deploying-an-existing-container-image-to-cloudrun","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 cd ~/gcp-bootcamp export LD_LIBRARY_PATH=/usr/local/lib gcloud auth configure-docker us-east1-docker.pkg.dev gcloud artifacts repositories create python-gcp --location=us-east1 --repository-format=docker export version=1.0 export color=blue docker-compose build docker-compose push gcloud run deploy <your-name>-my-app --region=us-east1 --tag $color --image=us-east1-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/python-gcp/app:v${version}","title":"Deploying an existing container image to CloudRun"},{"location":"4.run/#blue-green-deployment","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 cd ~/gcp-bootcamp export LD_LIBRARY_PATH=/usr/local/lib # Deploy BLUE VERSION export color=blue export version=1.0 docker-compose build docker-compose push gcloud run deploy <your-name>-rollout-app --allow-unauthenticated --region=us-east1 --tag $color --image=us-east1-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/python-gcp/app:v${version} # Deploy GREEN VERSION export color=green export version=2.0 docker-compose build docker-compose push gcloud run deploy <your-name>-rollout-app --allow-unauthenticated --region=us-east1 --tag $color --no-traffic --image=us-east1-docker.pkg.dev/${GOOGLE_CLOUD_PROJECT}/python-gcp/app:v${version} # update traffic gcloud run services update-traffic rollout-app --to-tags green=1 Help 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 gcloud run deploy [[SERVICE] --namespace=NAMESPACE] [--args=[ARG,...]] [--async] [--command=[COMMAND,...]] [--concurrency=CONCURRENCY] [--cpu=CPU] [--ingress=INGRESS; default=\"all\"] [--max-instances=MAX_INSTANCES] [--memory=MEMORY] [--min-instances=MIN_INSTANCES] [--platform=PLATFORM; default=\"managed\"] [--port=PORT] [--service-account=SERVICE_ACCOUNT] [--tag=TAG] [--timeout=TIMEOUT] [--no-traffic] [--[no-]use-http2] [--clear-env-vars | --set-env-vars=[KEY=VALUE,...] | --remove-env-vars=[KEY,...] --update-env-vars=[KEY=VALUE,...]] [--clear-labels | --remove-labels=[KEY,...] --labels=[KEY=VALUE,...] | --update-labels=[KEY=VALUE,...]] [--clear-secrets | --set-secrets=[KEY=VALUE,...] | --remove-secrets=[KEY,...] --update-secrets=[KEY=VALUE,...]] [--connectivity=CONNECTIVITY --clear-config-maps | --set-config-maps=[KEY=VALUE,...] | --remove-config-maps=[KEY,...] --update-config-maps=[KEY=VALUE,...]] [--image=IMAGE | --source=SOURCE] [--[no-]allow-unauthenticated --breakglass=JUSTIFICATION --clear-vpc-connector --revision-suffix=REVISION_SUFFIX --vpc-connector=VPC_CONNECTOR --vpc-egress=VPC_EGRESS --add-cloudsql-instances=[CLOUDSQL-INSTANCES,...] | --clear-cloudsql-instances | --remove-cloudsql-instances=[CLOUDSQL-INSTANCES,...] | --set-cloudsql-instances=[CLOUDSQL-INSTANCES,...] --binary-authorization=POLICY | --clear-binary-authorization --clear-key | --key=KEY --clear-post-key-revocation-action-type | --post-key-revocation-action-type=POST_KEY_REVOCATION_ACTION_TYPE] [--region=REGION | --cluster=CLUSTER --cluster-location=CLUSTER_LOCATION | --context=CONTEXT --kubeconfig=KUBECONFIG] [GCLOUD_WIDE_FLAG ...]","title":"Blue Green Deployment"},{"location":"5.app-engine/","text":"Under Construction \ud83d\udea7","title":"Lab 5\ufe0f\u20e3 (App Engine)"},{"location":"how-to-cloud-shell-tutorial/","text":"Introduction to Writing Tutorials in Cloud Shell \u00b6 Let's get started! \u00b6 Get your users up and running quickly with your project by including an interactive tutorial. This guide will show you how to build your own interactive tutorial (like this one). It'll also walk you through generating a button that users can use to launch your finished tutorial. Time to complete : About 10 minutes Click the Start button to move to the next step. What is Cloud Shell? \u00b6 Before we jump in, let's briefly go over what Cloud Shell can do. Cloud Shell is a personal hosted Virtual Machine which comes pre-loaded with developer tools for Google Cloud products. This interactive shell environment comes with a built-in code editor, persistent disk storage, and web preview functionality. To use command-line access alone, visit console.cloud.google.com/cloudshell . You can direct your users to Cloud Shell to help them quickly get started with your project; giving them an opportunity to step through a use case and familiarize themselves with your project's functionality. Continue on to the next step to start setting up your tutorial. In-context tutorials \u00b6 What you're looking at now is an in-context tutorial. The content is shown along with the Cloud Shell environment where you can carry out the tutorial steps. Having the tutorial and development environment open in the same place makes it easier for your users to start using your project through a straightforward single screen experience. Try running a command now: 1 echo \"Hello Cloud Shell\" Tip : Click the copy button on the side of the code box and paste the command in the Cloud Shell terminal to run it. Next, you\u2019ll write and launch a basic tutorial. Opening the editor \u00b6 You can edit a file stored in Cloud Shell using Cloud Shell\u2019s built-in text editor. To start, open the editor by clicking on the icon. Look at the source file for this tutorial by opening tutorial.md . Try making a change to the file for this tutorial, then saving it using the file menu . To restart the tutorial with your changes, run: 1 cloudshell launch-tutorial -d tutorial.md Next, you will learn how to format the text in a tutorial. Writing in Markdown \u00b6 To write your tutorial, use Markdown and follow these guidelines: Edit the title \u00b6 Modify the title of this tutorial ('# Introduction to writing tutorials in Cloud Shell') by changing it to: 1 # Teach me to write a tutorial Add a new step \u00b6 Next, add a step just after the title like this: 1 2 ## Step 1 This is a new step I\u2019ve just added. Each 'step' of a tutorial is displayed on one page. To move through steps, users use the 'Back' and 'Next' buttons. Add underlying items to a step \u00b6 To list items that are part of a tutorial step under a particular step heading, add them as such: 1 ### This is an item under your first step The tutorial engine also supports Markdown features like links and images. Note, including HTML is not supported . To recap, a title is marked with a level 1 heading, a step with a level 2 heading, and an item with a level 3 heading. Restart to see changes \u00b6 To see your changes, restart the tutorial by running: 1 cloudshell launch-tutorial -d tutorial.md Next up, adding helpful links and icons to your tutorial. Special tutorial features \u00b6 In the Markdown for your tutorial, you may include special directives that are specific to the tutorial engine. These allow you to include helpful shortcuts to actions that you may ask a user to perform. Trigger file actions in the text editor \u00b6 To include a link to open a file for editing , use: 1 2 3 4 <walkthrough-editor-open-file filePath=\"cloud-shell-tutorials/tutorial.md\"> open a file for editing </walkthrough-editor-open-file> Highlight a UI element \u00b6 You can also direct the user\u2019s attention to an element on the screen that you want them to interact with. You may want to show people where to find the web preview icon to view the web server running in their Cloud Shell virtual machine in a new browser tab. Display the web preview icon by including this in your tutorial\u2019s Markdown: 1 2 <walkthrough-web-preview-icon> </walkthrough-web-preview-icon> To create a link that shines a spotlight on the web preview icon , add the following: 1 2 3 4 <walkthrough-spotlight-pointer spotlightId=\"devshell-web-preview-button\"> spotlight on the web preview icon </walkthrough-spotlight-pointer> You can find a list of supported spotlight targets in the documentation for Cloud Shell Tutorials . You've now built a tutorial to help onboard users! Next, you\u2019ll create a button that allows users to launch your tutorial in Cloud Shell. Creating a button for your site \u00b6 Here is how you can create a button for your website, blog, or open source project that will allow users to launch the tutorial you just created. Creating an HTML Button \u00b6 To build a link for the 'Open in Cloud Shell' feature, start with this base HTML and replace the following: YOUR_REPO_URL_HERE with the project repository URL that you'd like cloned for your users in their launched Cloud Shell environment. TUTORIAL_FILE.md with your tutorial\u2019s Markdown file. The path to the file is relative to the root directory of your project repository. 1 2 3 <a href=\"https://console.cloud.google.com/cloudshell/open?git_repo=YOUR_REPO_URL_HERE&tutorial=TUTORIAL_FILE.md\"> <img alt=\"Open in Cloud Shell\" src=\"http://gstatic.com/cloudssh/images/open-btn.png\"> </a> Once you've edited the above HTML with the appropriate values for git_repo and tutorial , use the HTML snippet to generate the 'Open in Cloud Shell' button for your project. Creating a Markdown Button \u00b6 If you are posting the 'Open in Cloud Shell' button in a location that accepts Markdown instead of HTML, use this example instead: 1 [![Open this project in Cloud Shell](http://gstatic.com/cloudssh/images/open-btn.png)](https://console.cloud.google.com/cloudshell/open?git_repo=YOUR_REPO_URL_HERE&page=editor&tutorial=TUTORIAL_FILE.md) Likewise, once you've replaced YOUR_REPO_URL_HERE and TUTORIAL_FILE.md in the 'Open in Cloud Shell' URL as described above, the resulting Markdown snippet can be used to create your button. Congratulations \u00b6 You\u2019re all set! You can now have users launch your tutorial in Cloud Shell and have them start using your project with ease.","title":"Introduction to Writing Tutorials in Cloud Shell"},{"location":"how-to-cloud-shell-tutorial/#introduction-to-writing-tutorials-in-cloud-shell","text":"","title":"Introduction to Writing Tutorials in Cloud Shell"},{"location":"how-to-cloud-shell-tutorial/#lets-get-started","text":"Get your users up and running quickly with your project by including an interactive tutorial. This guide will show you how to build your own interactive tutorial (like this one). It'll also walk you through generating a button that users can use to launch your finished tutorial. Time to complete : About 10 minutes Click the Start button to move to the next step.","title":"Let's get started!"},{"location":"how-to-cloud-shell-tutorial/#what-is-cloud-shell","text":"Before we jump in, let's briefly go over what Cloud Shell can do. Cloud Shell is a personal hosted Virtual Machine which comes pre-loaded with developer tools for Google Cloud products. This interactive shell environment comes with a built-in code editor, persistent disk storage, and web preview functionality. To use command-line access alone, visit console.cloud.google.com/cloudshell . You can direct your users to Cloud Shell to help them quickly get started with your project; giving them an opportunity to step through a use case and familiarize themselves with your project's functionality. Continue on to the next step to start setting up your tutorial.","title":"What is Cloud Shell?"},{"location":"how-to-cloud-shell-tutorial/#in-context-tutorials","text":"What you're looking at now is an in-context tutorial. The content is shown along with the Cloud Shell environment where you can carry out the tutorial steps. Having the tutorial and development environment open in the same place makes it easier for your users to start using your project through a straightforward single screen experience. Try running a command now: 1 echo \"Hello Cloud Shell\" Tip : Click the copy button on the side of the code box and paste the command in the Cloud Shell terminal to run it. Next, you\u2019ll write and launch a basic tutorial.","title":"In-context tutorials"},{"location":"how-to-cloud-shell-tutorial/#opening-the-editor","text":"You can edit a file stored in Cloud Shell using Cloud Shell\u2019s built-in text editor. To start, open the editor by clicking on the icon. Look at the source file for this tutorial by opening tutorial.md . Try making a change to the file for this tutorial, then saving it using the file menu . To restart the tutorial with your changes, run: 1 cloudshell launch-tutorial -d tutorial.md Next, you will learn how to format the text in a tutorial.","title":"Opening the editor"},{"location":"how-to-cloud-shell-tutorial/#writing-in-markdown","text":"To write your tutorial, use Markdown and follow these guidelines:","title":"Writing in Markdown"},{"location":"how-to-cloud-shell-tutorial/#edit-the-title","text":"Modify the title of this tutorial ('# Introduction to writing tutorials in Cloud Shell') by changing it to: 1 # Teach me to write a tutorial","title":"Edit the title"},{"location":"how-to-cloud-shell-tutorial/#add-a-new-step","text":"Next, add a step just after the title like this: 1 2 ## Step 1 This is a new step I\u2019ve just added. Each 'step' of a tutorial is displayed on one page. To move through steps, users use the 'Back' and 'Next' buttons.","title":"Add a new step"},{"location":"how-to-cloud-shell-tutorial/#add-underlying-items-to-a-step","text":"To list items that are part of a tutorial step under a particular step heading, add them as such: 1 ### This is an item under your first step The tutorial engine also supports Markdown features like links and images. Note, including HTML is not supported . To recap, a title is marked with a level 1 heading, a step with a level 2 heading, and an item with a level 3 heading.","title":"Add underlying items to a step"},{"location":"how-to-cloud-shell-tutorial/#restart-to-see-changes","text":"To see your changes, restart the tutorial by running: 1 cloudshell launch-tutorial -d tutorial.md Next up, adding helpful links and icons to your tutorial.","title":"Restart to see changes"},{"location":"how-to-cloud-shell-tutorial/#special-tutorial-features","text":"In the Markdown for your tutorial, you may include special directives that are specific to the tutorial engine. These allow you to include helpful shortcuts to actions that you may ask a user to perform.","title":"Special tutorial features"},{"location":"how-to-cloud-shell-tutorial/#trigger-file-actions-in-the-text-editor","text":"To include a link to open a file for editing , use: 1 2 3 4 <walkthrough-editor-open-file filePath=\"cloud-shell-tutorials/tutorial.md\"> open a file for editing </walkthrough-editor-open-file>","title":"Trigger file actions in the text editor"},{"location":"how-to-cloud-shell-tutorial/#highlight-a-ui-element","text":"You can also direct the user\u2019s attention to an element on the screen that you want them to interact with. You may want to show people where to find the web preview icon to view the web server running in their Cloud Shell virtual machine in a new browser tab. Display the web preview icon by including this in your tutorial\u2019s Markdown: 1 2 <walkthrough-web-preview-icon> </walkthrough-web-preview-icon> To create a link that shines a spotlight on the web preview icon , add the following: 1 2 3 4 <walkthrough-spotlight-pointer spotlightId=\"devshell-web-preview-button\"> spotlight on the web preview icon </walkthrough-spotlight-pointer> You can find a list of supported spotlight targets in the documentation for Cloud Shell Tutorials . You've now built a tutorial to help onboard users! Next, you\u2019ll create a button that allows users to launch your tutorial in Cloud Shell.","title":"Highlight a UI element"},{"location":"how-to-cloud-shell-tutorial/#creating-a-button-for-your-site","text":"Here is how you can create a button for your website, blog, or open source project that will allow users to launch the tutorial you just created.","title":"Creating a button for your site"},{"location":"how-to-cloud-shell-tutorial/#creating-an-html-button","text":"To build a link for the 'Open in Cloud Shell' feature, start with this base HTML and replace the following: YOUR_REPO_URL_HERE with the project repository URL that you'd like cloned for your users in their launched Cloud Shell environment. TUTORIAL_FILE.md with your tutorial\u2019s Markdown file. The path to the file is relative to the root directory of your project repository. 1 2 3 <a href=\"https://console.cloud.google.com/cloudshell/open?git_repo=YOUR_REPO_URL_HERE&tutorial=TUTORIAL_FILE.md\"> <img alt=\"Open in Cloud Shell\" src=\"http://gstatic.com/cloudssh/images/open-btn.png\"> </a> Once you've edited the above HTML with the appropriate values for git_repo and tutorial , use the HTML snippet to generate the 'Open in Cloud Shell' button for your project.","title":"Creating an HTML Button"},{"location":"how-to-cloud-shell-tutorial/#creating-a-markdown-button","text":"If you are posting the 'Open in Cloud Shell' button in a location that accepts Markdown instead of HTML, use this example instead: 1 [![Open this project in Cloud Shell](http://gstatic.com/cloudssh/images/open-btn.png)](https://console.cloud.google.com/cloudshell/open?git_repo=YOUR_REPO_URL_HERE&page=editor&tutorial=TUTORIAL_FILE.md) Likewise, once you've replaced YOUR_REPO_URL_HERE and TUTORIAL_FILE.md in the 'Open in Cloud Shell' URL as described above, the resulting Markdown snippet can be used to create your button.","title":"Creating a Markdown Button"},{"location":"how-to-cloud-shell-tutorial/#congratulations","text":"You\u2019re all set! You can now have users launch your tutorial in Cloud Shell and have them start using your project with ease.","title":"Congratulations"},{"location":"labs/","text":"Welcome to our Bootcamp Hands On \u00b6 You can always follow these tutorials from this link 1. Deploy static website using a gcs bucket \u26c5 \u00b6 1 teachme docs/1.gcs-www.md Extra. Run app first in CloudShell \u00b6 1 teachme docs/x.from-cloud-shell.md 2. Deploying a webapp (hello-world) to a Compute Instance \ud83c\udf27\ufe0f\ud83c\udf27\ufe0f \u00b6 1 teachme docs/2.gce.md 3. Deploying a webapp (hello-world) to a Kubernetes Cluster \u26c8\ufe0f\u26c8\ufe0f\u26c8\ufe0f \u00b6 1 teachme docs/3.gke.md 4. Deploy a webapp (hello-world) via App Engine \u26c5 \u00b6 1 teachme docs/4.app-engine.md 5. Deploy the same webapp (hello-world) via Cloud Run \u26c5 \u00b6 1 teachme docs/5.run.md","title":"Home \ud83c\udfe0"},{"location":"labs/#welcome-to-our-bootcamp-hands-on","text":"You can always follow these tutorials from this link","title":"Welcome to our Bootcamp Hands On"},{"location":"labs/#1-deploy-static-website-using-a-gcs-bucket","text":"1 teachme docs/1.gcs-www.md","title":"1. Deploy static website using a gcs bucket \u26c5"},{"location":"labs/#extra-run-app-first-in-cloudshell","text":"1 teachme docs/x.from-cloud-shell.md","title":"Extra. Run app first in CloudShell"},{"location":"labs/#2-deploying-a-webapp-hello-world-to-a-compute-instance","text":"1 teachme docs/2.gce.md","title":"2. Deploying a webapp (hello-world) to a Compute Instance \ud83c\udf27\ufe0f\ud83c\udf27\ufe0f"},{"location":"labs/#3-deploying-a-webapp-hello-world-to-a-kubernetes-cluster","text":"1 teachme docs/3.gke.md","title":"3. Deploying a webapp (hello-world) to a Kubernetes Cluster \u26c8\ufe0f\u26c8\ufe0f\u26c8\ufe0f"},{"location":"labs/#4-deploy-a-webapp-hello-world-via-app-engine","text":"1 teachme docs/4.app-engine.md","title":"4. Deploy a webapp (hello-world) via App Engine \u26c5"},{"location":"labs/#5-deploy-the-same-webapp-hello-world-via-cloud-run","text":"1 teachme docs/5.run.md","title":"5. Deploy the same webapp (hello-world) via Cloud Run \u26c5"},{"location":"x.from-cloud-shell/","text":"Running our app for the first in cloud-shell \u00b6 Primer on Cloud Shell \u00b6 Cloud Shell is an online development and operations environment accessible anywhere with your browser. You can manage your resources with its online terminal preloaded with utilities such as the gcloud command-line tool, kubectl, and more. You can also develop, build, debug, and deploy your cloud-based apps using the online Cloud Shell Editor. Manage your Google Cloud resources with the flexibility of a Linux shell. Cloud Shell provides command-line access to a virtual machine instance in a terminal window. Many of your favorite command-line tools from bash and sh to emacs and vim are already pre-installed and kept up to date with Cloud Shell. Admin and development tools such as the gcloud command-line tool, MySql, Kubernetes, Docker, minikube, and Skaffold are configured and ready to use Getting Started \u00b6 Make sure you are in the right directory cd ~/gcp-bootcamp There are two versions of the app: Python3 NodeJs We can actually run the app purely using python3 app.py or node app.js but this is the magic of docker, you don't need to install anything other than docker. Also we can isolate different workload types in the same machine disregarding the app dependencies. Docker build the app \u00b6 There seems to be a problem with OpenSSL, docker-compose and cloud-shell, to fix it run: At this point we can build the app using docker build or docker-compose build We will choose docker-compose (recommended and will build python app) 1 2 3 export LD_LIBRARY_PATH = /usr/local/lib docker-compose build What if you want to build the node app? 1 2 3 4 export LD_LIBRARY_PATH = /usr/local/lib export PROJECT_LANG = nodejs docker-compose build This will build/compile a Docker image locally that we can use later to run the app. Run the app \u00b6 1 docker-compose up All together: 1 docker-compose up --build View the app \u00b6 Menu > Web Preview > Preview on Port 8080 Last Step \u00b6 Now that we have our image locally we need to push it to the container registry. Just make sure your image has a tag like this gcr.io/${GOOGLE_CLOUD_PROJECT}/python-gcp 1 docker-compose push","title":"Extra \ud83d\ude80 (cloud shell)"},{"location":"x.from-cloud-shell/#running-our-app-for-the-first-in-cloud-shell","text":"","title":"Running our app for the first in cloud-shell"},{"location":"x.from-cloud-shell/#primer-on-cloud-shell","text":"Cloud Shell is an online development and operations environment accessible anywhere with your browser. You can manage your resources with its online terminal preloaded with utilities such as the gcloud command-line tool, kubectl, and more. You can also develop, build, debug, and deploy your cloud-based apps using the online Cloud Shell Editor. Manage your Google Cloud resources with the flexibility of a Linux shell. Cloud Shell provides command-line access to a virtual machine instance in a terminal window. Many of your favorite command-line tools from bash and sh to emacs and vim are already pre-installed and kept up to date with Cloud Shell. Admin and development tools such as the gcloud command-line tool, MySql, Kubernetes, Docker, minikube, and Skaffold are configured and ready to use","title":"Primer on Cloud Shell"},{"location":"x.from-cloud-shell/#getting-started","text":"Make sure you are in the right directory cd ~/gcp-bootcamp There are two versions of the app: Python3 NodeJs We can actually run the app purely using python3 app.py or node app.js but this is the magic of docker, you don't need to install anything other than docker. Also we can isolate different workload types in the same machine disregarding the app dependencies.","title":"Getting Started"},{"location":"x.from-cloud-shell/#docker-build-the-app","text":"There seems to be a problem with OpenSSL, docker-compose and cloud-shell, to fix it run: At this point we can build the app using docker build or docker-compose build We will choose docker-compose (recommended and will build python app) 1 2 3 export LD_LIBRARY_PATH = /usr/local/lib docker-compose build What if you want to build the node app? 1 2 3 4 export LD_LIBRARY_PATH = /usr/local/lib export PROJECT_LANG = nodejs docker-compose build This will build/compile a Docker image locally that we can use later to run the app.","title":"Docker build the app"},{"location":"x.from-cloud-shell/#run-the-app","text":"1 docker-compose up All together: 1 docker-compose up --build","title":"Run the app"},{"location":"x.from-cloud-shell/#view-the-app","text":"Menu > Web Preview > Preview on Port 8080","title":"View the app"},{"location":"x.from-cloud-shell/#last-step","text":"Now that we have our image locally we need to push it to the container registry. Just make sure your image has a tag like this gcr.io/${GOOGLE_CLOUD_PROJECT}/python-gcp 1 docker-compose push","title":"Last Step"}]}